// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace JupiterToys.Automation.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ContactSubmissionScenarios")]
    public partial class ContactSubmissionScenariosFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "FeedBackSubmissionScenarios.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ContactSubmissionScenarios", "\tAs a user\r\n\tI want to submit a feedback form\r\n\tSo that I can send a feedback abo" +
                    "ut the store ", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Submit the feedback form without filling in the mandatory fields")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public void SubmitTheFeedbackFormWithoutFillingInTheMandatoryFields()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit the feedback form without filling in the mandatory fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("I have opened the Jupiter Toys page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.And("I have navigated to \"Contact\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
    testRunner.And("I have left all the mandatory fields empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("I have attempted to submit the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("I have seen a header message \"We welcome your feedback - but we won\'t get it unle" +
                        "ss you complete the form correctly.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Error"});
                table2.AddRow(new string[] {
                            "Forename",
                            "Forename is required"});
                table2.AddRow(new string[] {
                            "Email",
                            "Email is required"});
                table2.AddRow(new string[] {
                            "Message",
                            "Message is required"});
#line 14
 testRunner.And("I have seen below validation error messages next to each mandatory fields", ((string)(null)), table2, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Forename",
                            "Surname",
                            "Email",
                            "Telephone",
                            "Message"});
                table3.AddRow(new string[] {
                            "John",
                            "",
                            "john.wood@gmail.com",
                            "",
                            "Shop is awesome"});
#line 19
 testRunner.When("I populate all the mandatory fields with below inputs", ((string)(null)), table3, "When ");
#line hidden
#line 22
 testRunner.Then("all the validation errors get disappeared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successfully submit the feedback form")]
        public void SuccessfullySubmitTheFeedbackForm()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully submit the feedback form", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
 testRunner.Given("I have opened the Jupiter Toys page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.And("I have navigated to \"Contact\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Forename",
                            "Surname",
                            "Email",
                            "Telephone",
                            "Message"});
                table4.AddRow(new string[] {
                            "Paul",
                            "Reen",
                            "john.wood@gmail.com",
                            "09876765",
                            "Shop is awesome"});
#line 28
 testRunner.And("I populate all the fields with below inputs", ((string)(null)), table4, "And ");
#line hidden
#line 31
 testRunner.When("I have attempted to submit the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then("I can successfully submit the feedback form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Fill the form with invalid mandatory data")]
        [NUnit.Framework.TestCaseAttribute("", "john.wood", "", "Please enter a valid email", null)]
        [NUnit.Framework.TestCaseAttribute("", "@gmail", "", "Please enter a valid email", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "", "Email is required", null)]
        public void FillTheFormWithInvalidMandatoryData(string forename, string email, string message, string errorEmail, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("forename", forename);
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("error email", errorEmail);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fill the form with invalid mandatory data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
 testRunner.Given("I have opened the Jupiter Toys page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
 testRunner.And("I have navigated to \"Contact\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Forename",
                            "Surname",
                            "Email",
                            "Telephone",
                            "Message"});
                table5.AddRow(new string[] {
                            string.Format("{0}", forename),
                            "Wood",
                            string.Format("{0}", email),
                            "0112398",
                            string.Format("{0}", message)});
#line 37
 testRunner.And("I populate all the fields with below inputs", ((string)(null)), table5, "And ");
#line hidden
#line 40
 testRunner.And("I have attempted to submit the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Error"});
                table6.AddRow(new string[] {
                            "Forename",
                            "Forename is required"});
                table6.AddRow(new string[] {
                            "Email",
                            string.Format("{0}", errorEmail)});
                table6.AddRow(new string[] {
                            "Message",
                            "Message is required"});
#line 41
 testRunner.Then("I can see below validation error messages next to each fields", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
